.{
    .name = "angry",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{ .@"raylib-zig" = .{
        .url = "https://github.com/Not-Nik/raylib-zig/archive/0b1d3bd4e105ada3eb68bdd9d374ae6cf0435478.tar.gz",
        .hash = "12204a223b19043e17b79300413d02f60fc8004c0d9629b8d8072831e352a78bf212",
    }, .box2d = .{
        .url = "https://github.com/erincatto/box2c/archive/1d7d1cf14722a06f6a7b1c3b0850e70bcbec8558.tar.gz",
        .hash = "12206f4a188ea91148b14a94b3c1d1004bcb76562cc537d5d176a141c8c068171159",
    }, .ztracy = .{
        .path = "./libs/ztracy",
    } },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
